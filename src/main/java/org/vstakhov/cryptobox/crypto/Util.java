/*
 * Copyright (c) 2015 Vsevolod Stakhov
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
package org.vstakhov.cryptobox.crypto;

import java.nio.ByteBuffer;

public class Util {
	
	public static final char[] b32 = {'y','b','n','d','r','f','g','8','e',
		'j','k','m','c','p','q','x','o','t','1','u','w','i','s','z','a','3',
		'4','5','h','7','6','9'
	};
	
	public static void checkLength(byte[] data, int size) {
		if (data == null || data.length != size)
			throw new RuntimeException("Invalid size: " + data.length);
	}
	
	public static String base32Encode(byte[] in)
	{
		int remain = -1, x;
		int i;
		int inlen = in.length;
		int allocated_len = inlen * 8 / 5 + 2;
		StringBuilder out = new StringBuilder(allocated_len);

		for (i = 0; i < inlen; i++) {
			switch (i % 5) {
			case 0:
				/* 8 bits of input and 3 to remain */
				x = in[i];
				remain = in[i] >> 5;
				out.append(b32[x & 0x1F]);
				break;
			case 1:
				/* 11 bits of input, 1 to remain */
				x = remain | in[i] << 3;
				out.append(b32[x & 0x1F]);
				out.append(b32[x >> 5 & 0x1F]);
				remain = x >> 10;
				break;
			case 2:
				/* 9 bits of input, 4 to remain */
				x = remain | in[i] << 1;
				out.append(b32[x & 0x1F]);
				remain = x >> 5;
				break;
			case 3:
				/* 12 bits of input, 2 to remain */
				x = remain | in[i] << 4;
				out.append(b32[x & 0x1F]);
				out.append(b32[x >> 5 & 0x1F]);
				remain = x >> 10 & 0x3;
				break;
			case 4:
				/* 10 bits of output, nothing to remain */
				x = remain | in[i] << 2;
				out.append(b32[x & 0x1F]);
				out.append(b32[x >> 5 & 0x1F]);
				remain = -1;
				break;
			default:
				break;
			}

		}
		if (remain >= 0) {
			out.append(b32[remain]);
		}

		return out.toString();
	}

	public static final int b32_dec[] = {
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0x12, 0xff, 0x19, 0x1a, 0x1b, 0x1e, 0x1d,
		0x07, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0x18, 0x01, 0x0c, 0x03, 0x08, 0x05, 0x06,
		0x1c, 0x15, 0x09, 0x0a, 0xff, 0x0b, 0x02, 0x10,
		0x0d, 0x0e, 0x04, 0x16, 0x11, 0x13, 0xff, 0x14,
		0x0f, 0x00, 0x17, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0x18, 0x01, 0x0c, 0x03, 0x08, 0x05, 0x06,
		0x1c, 0x15, 0x09, 0x0a, 0xff, 0x0b, 0x02, 0x10,
		0x0d, 0x0e, 0x04, 0x16, 0x11, 0x13, 0xff, 0x14,
		0x0f, 0x00, 0x17, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	};

	public static byte[] base32Decode(String in)
	{
		int decoded;
		char c;
		int acc = 0;
		int processed_bits = 0;
		int i, allocated_len = in.length() * 5 / 8 + 2;
		ByteBuffer res = ByteBuffer.allocate(allocated_len);


		for (i = 0; i < in.length(); i ++) {
			c = in.charAt(i);

			if (processed_bits >= 8) {
				processed_bits -= 8;
				res.put((byte)(acc & 0xFF));
				acc >>= 8;
			}

			decoded = b32_dec[c];
			if (decoded == 0xff) {
				throw new RuntimeException("Invalid base32 character: " + c);
			}

			acc = (decoded << processed_bits) | acc;
			processed_bits += 5;
		}

		if (processed_bits > 0) {
			res.put((byte)(acc & 0xFF));
		}
		
		return res.array();
	}
}
